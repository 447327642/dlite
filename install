#!/bin/bash

: ${PREFIX:=/usr/local}
: ${DLITE_CPUS:=1}
: ${DLITE_MEM:=1G}

setup_nfs() {
    echo -n "creating nfs export.."
    local vmnet="/Library/Preferences/SystemConfiguration/com.apple.vmnet"
    until [ -e "$vmnet.plist" ]; do
        sleep 0.5
    done;

    local addr=$(defaults read ${vmnet} Shared_Net_Address)
    local mask=$(defaults read ${vmnet} Shared_Net_Mask)

    function ip2num() {
      local IFS=.
      local ip=($1)
      printf "%s\n" $(( (${ip[0]} << 24) | (${ip[1]} << 16) | (${ip[2]} << 8) | ${ip[3]} ))
    }

    function num2ip() {
      local n=$1
      printf "%d.%d.%d.%d\n" \
        $(( $n >> 24 )) $(( ($n >> 16) & 0xFF )) $(( ($n >> 8) & 0xFF )) $(( $n & 0xFF ))
    }

    local num=$(( $(ip2num ${addr}) & $(ip2num ${mask}) ))
    local net=$(num2ip ${num})

    local exports="/Users -network ${net} -mask ${mask} -alldirs -mapall=$(id -u $SUDO_USER):$(id -g $SUDO_USER)"

    touch /etc/exports
    grep -q "$exports" /etc/exports
    if [ $? -ne 0 ]; then
        echo "$exports" >> /etc/exports
        nfsd restart >/dev/null 2>&1
    fi
    echo "done"
}

create_disk() {
    echo -n "creating storage disk.."

    local tempdir=$(mktemp -d -t dlite)

    if [ -e "$HOME/.ssh/id_rsa.pub" ]; then
        mkdir -p "$tempdir/.ssh"
        cp "$HOME/.ssh/id_rsa.pub" "$tempdir/.ssh/authorized_keys"
    elif [ -e "$HOME/.ssh/id_dsa.pub" ]; then
        mkdir -p "$tempdir/.ssh"
        cp "$HOME/.ssh/id_dsa.pub" "$tempdir/.ssh/authorized_keys"
    else
        echo "no ssh key found for user $SUDO_USER, please create one and try again"
        exit 1
    fi

    echo "dhyve, please format-me" > "$tempdir/dhyve, please format-me"
    rm -rf "$PREFIX/var/db/dlite"
    mkdir -p "$PREFIX/var/db/dlite"
    tar cf "$PREFIX/var/db/dlite/disk.img" --directory="$tempdir" "dhyve, please format-me" ".ssh/authorized_keys"
    rm -rf "$tempdir"

    : ${DISKSIZE:=30}
    dd if=/dev/zero bs=1g count=$DISKSIZE >> "$PREFIX/var/db/dlite/disk.img" 2>/dev/null
    echo "done"
}

download_dhyveos() {
    echo -n "downloading os image.."

    local args
    if [ -n "$HOMEBREW_GITHUB_API_TOKEN" ]; then
        args="-H \"Authorization: token $HOMEBREW_GITHUB_API_TOKEN\""
    fi

    local version=$(curl -s "$args" https://api.github.com/repos/nlf/dhyve-os/releases/latest | awk -F'"' '/tag_name/ { print $4 }')

    if [ -z "$version" ]; then
        echo "failed to retrieve latest version information for dhyve-os"
        exit 1
    fi

    rm -rf "$PREFIX/usr/share/dlite"
    mkdir -p "$PREFIX/usr/share/dlite"

    _download_file() {
        local file=$1
        curl -Lso "$PREFIX/usr/share/dlite/$file" "https://github.com/nlf/dhyve-os/releases/download/$version/$file"
        if [ $? != 0 ]; then
            echo "failed to download $file, aborting install.."
            exit 1
        fi
    }

    _download_file bzImage
    _download_file rootfs.cpio.xz

    echo "done"
}

brew_updated=0
_brew_update() {
    [ "$brew_updated" == 1 ] && return 0

    if [ -z "$(which brew)" ]; then
        echo "some external programs are required, but homebrew is missing. please either install homebrew http://brew.sh or install xhyve and socat manually"
        exit 1
    fi

    echo "updating homebrew.."
    brew update
    if [ $? != 0 ]; then
        echo "failed to execute 'brew update', aborting install.."
        exit 1
    fi
    brew_updated=1
}

_brew_install() {
    local app=$1
    echo "installing $app..."
    brew install $app
    if [ $? != 0 ]; then
        echo "failed to install $app via homebrew, aborting install.."
        exit 1
    fi
}

if [ -z "$1" -o "$1" != "confirmed" ]; then
    if [ -e "$PREFIX/etc/dlite.conf" -o -e "$PREFIX/var/dlite" ]; then
        echo "It looks like you've already installed dlite. Running this script again will overwrite any existing configuration you may have."
        read -r -p "Do you wish to continue? (y/n) " response
        case "$response" in
            [nN]|[nN][oO])
                exit 1
                ;;
        esac
    fi
fi

xhyve_path="$(which xhyve)"
if [ -z "$xhyve_path" ]; then
    _brew_update
    _brew_install xhyve
    xhyve_path="$(which xhyve)"
fi

socat_path="$(which socat)"
if [ -z "$socat_path" ]; then
    _brew_update
    _brew_install socat
    socat_path="$(which socat)"
fi

if [ "$USER" != "root" ]; then
    echo "this script requires root access, restarting under sudo.. enter your password if prompted to continue"
    sudo "$0" confirmed
    exit $?
fi

download_dhyveos
create_disk
echo "DLITE_UUID=$(uuidgen)" > "$PREFIX/etc/dlite.conf"
echo "DLITE_CPUS=$DLITE_CPUS" >> "$PREFIX/etc/dlite.conf"
echo "DLITE_MEM=$DLITE_MEM" >> "$PREFIX/etc/dlite.conf"
echo "XHYVE=$xhyve_path" >> "$PREFIX/etc/dlite.conf"
echo "SOCAT=$socat_path" >> "$PREFIX/etc/dlite.conf"

install -CSv dlite "$PREFIX/bin"
install -CSv local.dlite.plist /Library/LaunchDaemons
sed -i.bak "s|USER_PREFIX|$PREFIX|g" /Library/LaunchDaemons/local.dlite.plist

dlite_pid=$(launchctl list | grep local.dlite | cut -f1)
if [ -n "$dlite_pid" -a "$dlite_pid" != "-" ]; then
    launchctl unload /Library/LaunchDaemons/local.dlite.plist >/dev/null 2>&1
    while ps "$dlite_pid"; do
        sleep 0.5
    done
fi

launchctl load /Library/LaunchDaemons/local.dlite.plist >/dev/null 2>&1
setup_nfs
